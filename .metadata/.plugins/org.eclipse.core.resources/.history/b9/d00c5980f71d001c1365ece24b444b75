package com.app.ovm.services.classes;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.ovm.dao.ICartRepository;
import com.app.ovm.dao.IOrderDetailsRepository;
import com.app.ovm.dao.IOrderRepository;
import com.app.ovm.dao.IProductRepository;
import com.app.ovm.dao.IUserRepository;
import com.app.ovm.pojos.entity.Cart;
import com.app.ovm.pojos.entity.OrderDetails;
import com.app.ovm.pojos.entity.Orders;
import com.app.ovm.pojos.entity.Product;
import com.app.ovm.pojos.entity.User;
import com.app.ovm.pojos.enums.OrderStatus;
import com.app.ovm.services.interfaces.IOrderService;

@Service
@Transactional
public class OrderServiceImpl implements IOrderService {
	@Autowired
	private IUserRepository userRepository;

	@Autowired
	private IOrderRepository orderRepository;

	@Autowired
	private IOrderDetailsRepository detailsRepository;
	
	@Autowired
	private ICartRepository cartRepository;
	
	@Autowired
	private IProductRepository productRepository;

	@Override
	public List<OrderDetails> addOrderDetails(int userId, int  orderId) {
		List<OrderDetails> orderDetails = new ArrayList<OrderDetails>();
		Orders orders = orderRepository.findById(orderId).get();
		User user = userRepository.findById(userId).get();
		List<Cart> lineItems = cartRepository.getCartByUserId(userId);
		for (Cart line : lineItems) {
			Product product = productRepository.findByProductName(line.getProductName()).get();
			if (product.getAvailableQuantity() > 0 && product.getAvailableQuantity() >= line.getAvailableQuantity()) {
				int qty = product.getAvailableQuantity() - line.getAvailableQuantity();
				product.setAvailableQuantity(qty);
				OrderDetails booking = new OrderDetails();
				booking.setProductName(line.getProductName());
				booking.setPricePerKg(line.getPricePerKg());
				booking.setDiscountOffer(line.getDiscountOffer());
				booking.setAvailableQuantity(line.getAvailableQuantity());
				booking.setFinalPrice(line.getFinalPrice());
				booking.setSelectedUser(user);
				booking.setSelectedOrder(orders);
				booking.setDescription(line.getDescription());
				orderDetails.add(detailsRepository.save(booking));
			}
		}
		cartRepository.deleteByUserId(userId);
		return orderDetails;
	}

	@Override
	public int addOrder(int userId, double totalPrice) {
		System.out.println("rent booking");
		Orders orders = new Orders();
		orders.setOrderDeliveryStatus(OrderStatus.PENDING);
		orders.setOrderDate(LocalDate.now());
		orders.setDeliveryDate(LocalDate.now());
		orders.setSelectedUser(userRepository.findById(userId).get());
		orders.setTotalPrice(totalPrice);
		System.out.println(orders);
		int id = orderRepository.save(orders).getId();
		return id;
	}
	
	
	

}
