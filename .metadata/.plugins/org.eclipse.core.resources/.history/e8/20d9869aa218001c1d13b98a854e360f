package com.app.ovm.pojos.entity;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import com.app.ovm.pojos.enums.UserRole;
import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
//@Table(name = "user")
public class User extends BaseEntity {
	@Column(length = 20, unique = true, nullable = false)
	private String userName;
	@Column(length = 20, nullable = false)
	private String password;
	@Transient
	private String confirmPassword;
	@Enumerated(EnumType.STRING)
	@Column(length = 20, nullable = false)
	private UserRole userRole=UserRole.CUSTOMER;
	private LocalDate registrationDate=LocalDate.now();
	private boolean active=true;

	@OneToOne(targetEntity = UserProfile.class, mappedBy = "user")
	private UserProfile userProfile;

	@JsonIgnore
	@OneToMany(targetEntity = Order.class, mappedBy = "user")
	private List<Order> order = new ArrayList<>();

	public User() {

	}

	public User(String userName, String password, UserRole userRole, LocalDate registrationDate, boolean active) {
		super();
		this.userName = userName;
		this.password = password;
		this.userRole = userRole;
		this.registrationDate = registrationDate;
		this.active = active;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	public UserRole getUserRole() {
		return userRole;
	}

	public void setUserRole(UserRole userRole) {
		this.userRole = userRole;
	}

	public LocalDate getRegistrationDate() {
		return registrationDate;
	}

	public void setRegistrationDate(LocalDate registrationDate) {
		this.registrationDate = registrationDate;
	}

	public boolean isActive() {
		return active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Override
	public String toString() {
		return "User [Id=" + getId() + "userName=" + userName + ", password=" + password + ", userRole=" + userRole
				+ ", registrationDate=" + registrationDate + ", active=" + active + "]";
	}

}
